user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

# jms broker config
stream {
    # pass tcp jms messages
    server {
        listen 61617;
        proxy_pass satvm05.researchstudio.at:61618;
    }
}

# https config
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log main;

    sendfile           off;
    keepalive_timeout  65;

    # request the client certificate but does not require it to be signed by a trusted CA certificate
    ssl_verify_client optional_no_ca;

    # if there is the
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # redirect all http requests to https
    server {
        listen          80;
	      server_name     satvm05.researchstudio.at;
	      root            /data;
	      return          301 https://$server_name$request_uri;
    }

    # pass https requests to owner and node instances
    server {
        ssl                 on;
        listen              443 ssl http2;
        root                /data;
        server_name         satvm05.researchstudio.at;

        # certificate data 
        ssl_certificate     won-server-certs/t-cert.pem;
        ssl_certificate_key won-server-certs/t-key.pem;
        ssl_password_file   won-server-certs/won_certificate_passwd_file;

        location /won {
            # set the client certificate in this header when the certificate was already validated by nginx
            proxy_set_header X-Client-Certificate $ssl_client_cert;
            proxy_pass https://satvm05.researchstudio.at:8889/won;

            # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
            # Default in Spring Boot and required. Without it nginx suppresses the value
            proxy_pass_header X-XSRF-TOKEN;

            # Set origin to the real instance, otherwise a of Spring security check will fail
            # Same value as defined in proxy_pass
            proxy_set_header Origin "https://satvm05.researchstudio.at:8889/won";
			
			# Set Host header so the wonnode can operate on the original uri for access control checks
			proxy_set_header   Host $host;

        }

        location /owner {
            proxy_pass https://satvm05.researchstudio.at:8082/owner;

            # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
            # Default in Spring Boot and required. Without it nginx suppresses the value
            proxy_pass_header X-XSRF-TOKEN;

            # Set origin to the real instance, otherwise a of Spring security check will fail
            # Same value as defined in proxy_pass
            proxy_set_header Origin "https://satvm05.researchstudio.at:8082/owner";

            # add for web socket compatibility
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

        }

        location = /robots.txt {
            add_header Content-Type text/plain;
            allow all;
            return 200 "User-agent: *\nSitemap: https://satvm05.researchstudio.at/owner/sitemap.xml";
        }

        location / {
            # here we do a redirect to /owner uri prefix since we didn't figure out how to use
            # proxy_cookie_path exactly to handle sessions correctly when webapp is accessed in two ways:
            # with and without /owner prefix => so redirect seems to be the easiest solution for now
            return 301 https://$server_name/owner$request_uri;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
