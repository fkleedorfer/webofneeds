# this config file describes the behavior of the cbi.matchat.org behavior.
# It is included by the main matchat "nginx.conf" file in the http section


# ==============================================
# uki owner and node config
# ==============================================

# redirect all http requests to https
server {
    listen          80;
    server_name     cbi.matchat.org;
    root            /data;

    # configuration for letsencrypt certbot ssl challenge
    location /.well-known/acme-challenge {
        root    /usr/share/nginx/html;
    }

    location / {
        return  301 https://$server_name$request_uri;
    }
}

# pass https requests to owner instances
server {
    ssl                 on;
    listen              443 ssl;
    root                /data;
    server_name         cbi.matchat.org;

    # request the client certificate but does not require it to be signed by a trusted CA certificate
    # ssl_verify_client optional_no_ca; #TODO: uncomment and move this to the node once we have the node under a separate url

    # add for web socket compatibility
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    # certificate data
    ssl_certificate     /etc/letsencrypt/live/cbi.matchat.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cbi.matchat.org/privkey.pem;

    location /owner {
        proxy_pass https://satvm06.researchstudio.at:8082/owner;

        # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
        # Default in Spring Boot and required. Without it nginx suppresses the value
        proxy_pass_header X-XSRF-TOKEN;

        # Set origin to the real instance, otherwise a of Spring security check will fail
        # Same value as defined in proxy_pass
        proxy_set_header Origin "https://satvm06.researchstudio.at:8082/owner";

        # add for web socket compatibility
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /won {
        # set the client certificate in this header when the certificate was already validated by nginx
        proxy_set_header X-Client-Certificate $ssl_client_escaped_cert;
        proxy_pass https://satvm06.researchstudio.at:8443/won;

        # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
        # Default in Spring Boot and required. Without it nginx suppresses the value
        proxy_pass_header X-XSRF-TOKEN;

        # Set origin to the real instance, otherwise a of Spring security check will fail
        # Same value as defined in proxy_pass
        proxy_set_header Origin "https://satvm06.researchstudio.at:8443/won";

        # Set Host header so the wonnode can operate on the original uri for access control checks
        proxy_set_header   Host $host;
    }

    location / {
        # here we do a redirect to /owner uri prefix since we want the owner application to be the default
        # application on this server. We didn't figure out how to use proxy_cookie_path exactly to handle
        # sessions correctly when webapp is accessed in two ways: with and without /owner prefix => so redirect
        # seems to be the easiest solution for now
        return 301 https://$server_name/owner$request_uri;
    }
}
