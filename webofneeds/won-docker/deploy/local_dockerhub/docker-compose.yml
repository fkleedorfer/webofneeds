version: "3"
services:
  # create self-signed server certificate for $deploy_host
  gencert:
    image: webofneeds/gencert:live
    environment:
      - "CN=wonnode"
      - "PASS=pass:changeit"
    volumes:
      - $base_folder/won-server-certs:/usr/local/certs/out/

  # portsgres atom databases for owner and wonnode
  postgres:
    restart: always
    image: webofneeds/postgres:live
    environment:
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    #volumes:
    #  - $base_folder/postgres/data/pgdata:/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"

  # wonnode server => access https://$deploy_host:8889/won
  wonnode:
    restart: always
    image: webofneeds/wonnode:live
    environment:
      - "URI_HOST=wonnode"
      - "HTTP_PORT=8443"
      - "DB_SQL_JDBCDRIVERCLASS=org.postgresql.Driver"
      - "DB_SQL_JDBCURL=jdbc:postgresql://postgres:5432/won_node"
      - "DB_SQL_USER=won"
      - "DB_SQL_PASSWORD=won"
      - "DB_DDL_STRATEGY=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "ACTIVEMQ_BROKER_PORT=61617"
    ports:
      - "8889:8443"
      - "61617:61617"
    volumes:
      - $base_folder/won-server-certs:/usr/local/tomcat/conf/ssl/
      - $base_folder/won-client-certs/wonnode:/usr/local/tomcat/won/client-certs/
    depends_on:
      - postgres

  # mongodb for persistent debug bot
  mongodb:
    restart: always
    image: tutum/mongodb:3.2
    environment:
      - "MONGODB_USER=won"
      - "MONGODB_DATABASE=won"
      - "MONGODB_PASS=won"
    ports:
      - "27017:27017"
      - "28017:28017"
    volumes:
      - $base_folder/mongodb/data/db:/data/db

  # debug bot used to test atom communication
#  debug_bot:
#    restart: always
#    #build: ../../image/bots
#    image: webofneeds/bots:live
#    environment:
#      - "NODE_DEFAULT_HOST=wonnode"
#      - "NODE_DEFAULT_HTTP_PORT=8443"
#      - "WON_NODE_URIS=https://wonnode:8443/won/resource"
#      - "BOTCONTEXT_IMPL=mongoBotContext"
#      - "BOTCONTEXT_MONGODB_USER=won"
#      - "BOTCONTEXT_MONGODB_PASS=won"
#      - "BOTCONTEXT_MONGODB_HOST=mongodb"
#      - "BOTCONTEXT_MONGODB_PORT=27017"
#      - "BOTCONTEXT_MONGODB_DATABASE=won"
#    depends_on:
#      - wonnode
#      - mongodb

  # owner application (frontend) => access https://$deploy_host:8082/owner
  owner:
    restart: always
    image: webofneeds/owner:live
    environment:
      - "NODE_DEFAULT_HOST=wonnode"
      - "URI_HOST=owner"
      - "HTTP_PORT=8443"
      - "NODE_DEFAULT_HTTP_PORT=8443"
      - "DB_SQL_JDBCDRIVERCLASS=org.postgresql.Driver"
      - "DB_SQL_JDBCURL=jdbc:postgresql://postgres:5432/won_owner"
      - "DB_SQL_USER=won"
      - "DB_SQL_PASSWORD=won"
      - "DB_DDL_STRATEGY=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "LOGBACK_CONFIG=logback.xml"
    ports:
      - "8082:8443"
    volumes:
      - $base_folder/won-server-certs:/usr/local/tomcat/conf/ssl/
      - $base_folder/won-client-certs/owner:/usr/local/tomcat/won/client-certs/
    depends_on:
      - wonnode
      - postgres

  # bigdata rdf store for matcher service
  bigdata:
    restart: always
    image: webofneeds/bigdata:latest
    ports:
      - "10000:9999"

  # matcher service on connect with wonnode
  matcher_service:
    restart: always
    image: webofneeds/matcher_service:live
    environment:
      - "NODE_HOST=matcherservice"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "URI_SPARQL_ENDPOINT=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "WONNODECONTROLLER_WONNODE_CRAWL=https://wonnode:8443/won/resource"
      - "CLUSTER_LOCAL_PORT=2561"
    networks:
      default:
        aliases:
          - matcherservice
    ports:
      - "2561:2561"
    depends_on:
      - bigdata
      - wonnode

  # solr server as an atom index
  solr:
    restart: always
    image: webofneeds/solr:live
    #volumes:
    #  - $base_folder/solr/won/data:/opt/solr/server/solr/won/data
    #  - $base_folder/solr/wontest/data:/opt/solr/server/solr/wontest/data
    ports:
      - "8984:8983"

  # solr matcher and connect to matcher service
  matcher_solr:
    restart: always
    image: webofneeds/matcher_solr:live
    environment:
      - "NODE_HOST=matchersolr"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "CLUSTER_LOCAL_PORT=2562"
      - "MATCHER_SOLR_URI_SOLR_SERVER=http://solr:8983/solr/"
      - "MATCHER_SOLR_URI_SOLR_SERVER_PUBLIC=http://solr:8983/solr/"
    networks:
      default:
        aliases:
          - matchersolr
    ports:
      - "2562:2562"
    depends_on:
      - solr
      - matcher_service

  # sparql matcher and connect to matcher service
  matcher_sparql:
    restart: always
    image: webofneeds/matcher_sparql:int
    environment:
      - "NODE_HOST=matchersparql"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "CLUSTER_LOCAL_PORT=2564"
      - "MATCHER_SPARQL_URI_SPARQL_ENDPOINT=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "MATCHER_SPARQL_URI_PUBLIC=http://matchersparql/sparql/"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    networks:
      default:
        aliases:
          - matchersparql
    ports:
      - "2564:2564"
    depends_on:
      - matcher_service
    volumes:
      - $base_folder/won-client-certs/matcher_sparql:/usr/src/matcher-sparql/client-certs/
