@prefix ex: <http://example.org/ns#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix vf:    <https://w3id.org/valueflows#> .
@prefix om2: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
@prefix wd: <http://www.wikidata.org/entity/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

@prefix bl: <https://w3id.org/won/blending#> .
@prefix var: <http://example.org/var#> .
@prefix vfsh: <https://w3id.org/valueflows-shacl/shapes#> .

ex:PatternTransferAtLocation-main {
    ex:PatternTransferAtLocation a bl:Template ;
    bl:dataGraph ex:PatternTransferAtLocation-data ;
    bl:blendingConfigGraph ex:PatternTransferAtLocation-config ;
    bl:shapesGraph ex:PatternTransferAtLocation-shapes .
}

ex:PatternTransferAtLocation-data {

    var:transferIntent
        a vf:Intent ;
        vf:action vf:transfer ;
        vf:provider var:provider ;
        vf:receiver var:receiver ;
        vf:resourceInventoriedAs var:resource ;
        vf:toResourceInventoriedAs var:toResource ;
        vf:atLocation var:location ;
        vf:resourceQuantity [
            om2:hasUnit var:unit ;
            om2:hasNumericalValue var:value ;
        ]
    .

}

ex:PatternTransferAtLocation-config {

    vf:transfer a bl:Unblendable .
    vf:Intent a bl:Unblendable .

    var:transferIntent
        a bl:Variable ;
        bl:name "transfer intent" .

    var:provider
        a bl:Variable ;
        bl:name "provider" .
    var:receiver
         a bl:Variable ;
        bl:name "receiver" .
    var:resource
        a bl:Variable ;
        bl:name "resource" .
    var:toResource
        a bl:Variable ;
        bl:name "toResource" .
    var:location
        a bl:Variable ;
        bl:name "location" .
    var:unit
        a bl:Variable ;
        bl:name "unit" .
    var:value
        a bl:Variable ;
        bl:name "value" .
}

ex:PatternTransferAtLocation-shapes {

    # resource must be in provider's custody
    ex:providerIsCustodianOfResourceShape a sh:NodeShape  ;
        sh:targetNode var:resource ;
        sh:property [
            sh:path ( bl:boundTo vf:custodian [ sh:inversePath bl:boundTo ] ) ;
            sh:hasValue var:provider
        ] .

   # toResource must be in receiver's custody
   ex:receiverIsCustodianOfToResourceShape a sh:NodeShape  ;
       sh:targetNode var:toResource ;
       sh:property [
           sh:path ( bl:boundTo vf:custodian [ sh:inversePath bl:boundTo ] ) ;
           sh:hasValue var:receiver
       ] .

   # resource must be in location
      ex:resourceInLocation a sh:NodeShape ;
       sh:targetNode var:resource ;
       sh:property [
           sh:path (bl:boundTo vf:currentLocation [ sh:inversePath bl:boundTo ] ) ;
           sh:hasValue var:location ;
           sh:minCount 1 ;
           sh:maxCount 1 ;
       ] .

      # toResource must be in location
         ex:toResourceInLocation a sh:NodeShape ;
          sh:targetNode var:toResource ;
          sh:property [
              sh:path (bl:boundTo vf:currentLocation [ sh:inversePath bl:boundTo ] ) ;
              sh:hasValue var:location ;
              sh:minCount 1 ;
              sh:maxCount 1 ;
          ] .


   bl:onlyOneBoundValueShape a sh:NodeShape ;
        sh:targetClass bl:Variable ;
        sh:property [
            sh:path bl:boundTo ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
        ] .

}


