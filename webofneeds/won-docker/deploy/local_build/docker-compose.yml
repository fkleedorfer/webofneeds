version: "3"
# CONFIGURATION:
#
# By default, this config assumes that docker-compose is run
# in the `webofneeds/webofneeds/won-docker/deploy/local_build` folder. If this is not the case,
# the following two environment variables have to be set
#
# ${base_folder:-.}: the directory to be used for volumes and temp files
# ${WON_GIT_REPO:-./../../../..}: the base directory that the webofneeds project was cloned into

services:
  # create self-signed server certificate for $deploy_host
  gencert:
    build: ../../image/gencert
    #image: webofneeds/gencert:live
    environment:
      - "CN=wonnode"
      - "PASS=pass:changeit"
      - "SAN=DNS:localhost,DNS:wonnode,DNS:owner,DNS:bigdata,DNS:postgres"
    volumes:
      - ${base_folder:-.}/won-server-certs:/usr/local/certs/out/

  # portsgres atom databases for owner and wonnode
  postgres:
    restart: always
    build: ../../image/postgres
    #image: webofneeds/postgres:live
    environment:
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      #- ${base_folder:-.}/postgres/data/pgdata:/var/lib/postgresql/data/pgdata
      # use a named volume here to work around a postgres/docker incompatibility under windows
      # (see end of file)
      - postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"

  wonnode_devsync:
    restart: "no"
    build: ../../image/devsync
    environment:
      - "DAEMON_MODE=false"
      - "DELETE_CONTENTS_ON_STARTUP=true"
    volumes:
      - wonnode-won-deps:/destData:rw
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-docker/deploy/local_build/logback-config:/srcData/logback-config:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-auth/target/classes:/srcData/won-auth:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-auth/generated-sources/shacl2java:/srcData/won-auth-s2j:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-shacl2java/target/classes:/srcData/won-utils-shacl2java:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-core/target/classes:/srcData/won-core:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-vocab/target/classes:/srcData/won-vocab:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-cryptography/target/classes:/srcData/won-cryptography:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-node/target/classes:/srcData/won-node:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-node-webapp/target/classes:/srcData/won-node-webapp:ro

  # wonnode server => access https://$deploy_host:8443/won
  wonnode:
    restart: always
    build:
      context: ../../image/wonnode
      args:
        DEV_MODE: "true"
    #image: webofneeds/wonnode:live
    environment:
      - "URI_HOST=wonnode"
      - "HTTP_PORT=8443"
      - "DB_SQL_JDBCDRIVERCLASS=org.postgresql.Driver"
      - "DB_SQL_JDBCURL=jdbc:postgresql://postgres:5432/won_node"
      - "DB_SQL_USER=won"
      - "DB_SQL_PASSWORD=won"
      - "DB_DDL_STRATEGY=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "ACTIVEMQ_BROKER_PORT=61617"
      - "LOGBACK_CONFIG=../logback-config/logback.xml"
      - "JMX_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=*:62000,server=y,suspend=n
                  -Dcom.sun.management.jmxremote.port=61000 -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=61001
                  -Djava.rmi.server.hostname=wonnode" #wonnode is correct here!
    ports:
      - "8443:8443" #ports have to be the same so we can use the same wonNodeUri from inside and outside
      - "61617:61617"
      - "62000:62000"
      - "61000:61000"
      - "61001:61001"
    volumes:
      - ${base_folder:-.}/won-server-certs:/usr/local/tomcat/conf/ssl/:ro
      - ${base_folder:-.}/won-client-certs/wonnode:/usr/local/tomcat/won/client-certs/:rw
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-docker/deploy/local_build/logback-config:/usr/local/tomcat/won/logback-config/:ro
      - wonnode-won-deps:/usr/local/tomcat/webapps/won/WEB-INF/classes:ro
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-auth/target/classes:/usr/local/tomcat/won/override-classes/won-auth
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-shacl2java/target/classes:/usr/local/tomcat/won/override-classes/won-utils-shacl2java
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-core/target/classes:/usr/local/tomcat/won/override-classes/won-core
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-vocab/target/classes:/usr/local/tomcat/won/override-classes/won-vocab
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-cryptography/target/classes:/usr/local/tomcat/won/override-classes/won-cryptography
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-node/target/classes:/usr/local/tomcat/won/override-classes/won-node
    depends_on:
      - wonnode_devsync
      - postgres

  # mongodb for persistent debug bot
  mongodb:
    restart: always
    image: tutum/mongodb:3.2
    environment:
      - "MONGODB_USER=won"
      - "MONGODB_DATABASE=won"
      - "MONGODB_PASS=won"
    ports:
      - "27017:27017"
      - "28017:28017"
    volumes:
      - mongodb-data:/data/db

# debug bot used to test atom communication
#  debug_bot:
#    restart: always
#    build: ../../image/bots
#    #image: webofneeds/bots:live
#    environment:
#      - "NODE_DEFAULT_HOST=wonnode"
#      - "NODE_DEFAULT_HTTP_PORT=8443"
#      - "WON_NODE_URIS=https://wonnode:8443/won/resource"
#      - "BOTCONTEXT_IMPL=mongoBotContext"
#      - "BOTCONTEXT_MONGODB_USER=won"
#      - "BOTCONTEXT_MONGODB_PASS=won"
#      - "BOTCONTEXT_MONGODB_HOST=mongodb"
#      - "BOTCONTEXT_MONGODB_PORT=27017"
#      - "BOTCONTEXT_MONGODB_DATABASE=won"
#    depends_on:
#      - wonnode
#      - mongodb

  owner_devsync:
    restart: "no"
    build: ../../image/devsync
    environment:
      - "DAEMON_MODE=false"
      - "DELETE_CONTENTS_ON_STARTUP=true"
    volumes:
      - owner-won-deps:/destData:rw
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-docker/deploy/local_build/logback-config:/srcData/logback-config:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-owner-webapp/target/classes:/srcData/won-owner-webapp:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-owner/target/classes:/srcData/won-owner:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-core/target/classes:/srcData/won-core:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-vocab/target/classes:/srcData/won-vocab:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-cryptography/target/classes:/srcData/won-cryptography:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-matcher/target/classes:/srcData/won-matcher:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-mail/target/classes:/srcData/won-utils-mail:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-goals/target/classes:/srcData/won-utils-goals:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-conversation/target/classes:/srcData/won-utils-conversation:ro
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-batch/target/classes:/srcData/won-utils-batch:ro

  # owner application (frontend) => access https://$deploy_host:8082/owner
  owner:
    restart: always
    build:
      context: ../../image/owner
      args:
        DEV_MODE: "true"
    #image: webofneeds/owner:live
    environment:
      - "NODE_DEFAULT_HOST=wonnode"
      - "URI_HOST=owner"
      - "HTTP_PORT=8443"
      - "NODE_DEFAULT_HTTP_PORT=8443"
      - "DB_SQL_JDBCDRIVERCLASS=org.postgresql.Driver"
      - "DB_SQL_JDBCURL=jdbc:postgresql://postgres:5432/won_owner"
      - "DB_SQL_USER=won"
      - "DB_SQL_PASSWORD=won"
      - "DB_DDL_STRATEGY=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "JMX_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=*:62010,server=y,suspend=n
                  -Dcom.sun.management.jmxremote.port=61010 -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=61011
                  -Djava.rmi.server.hostname=wonnode" #wonnode is correct here!"
      #- "LOGBACK_CONFIGURATIONFILE=/usr/local/tomcat/won/logback-config/logback.xml"
      - "LOGBACK_CONFIG=../logback-config/logback.xml"
    ports:
      - "8082:8443"
      - "62010:62010"
      - "61010:61010"
      - "61011:61011"
    volumes:
      - ${base_folder:-.}/won-server-certs:/usr/local/tomcat/conf/ssl/:ro
      - ${base_folder:-.}/won-client-certs/owner:/usr/local/tomcat/won/client-certs/:rw
      - ${WON_GIT_REPO:-./../../../..}/webofneeds/won-docker/deploy/local_build/logback-config:/usr/local/tomcat/won/logback-config/:ro
      - owner-won-deps:/usr/local/tomcat/webapps/owner/WEB-INF/classes:ro
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-owner-webapp/target/classes:/usr/local/tomcat/won/override-classes/won-owner-webapp/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-owner/target/classes:/usr/local/tomcat/won/override-classes/won-owner/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-core/target/classes:/usr/local/tomcat/won/override-classes/won-core/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-vocab/target/classes:/usr/local/tomcat/won/override-classes/won-vocab/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-cryptography/target/classes:/usr/local/tomcat/won/override-classes/won-cryptography/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-matcher/target/classes:/usr/local/tomcat/won/override-classes/won-matcher/
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-mail/target/classes:/usr/local/tomcat/won/override-classes/won-utils-mail
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-goals/target/classes:/usr/local/tomcat/won/override-classes/won-utils-goals
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-conversation/target/classes:/usr/local/tomcat/won/override-classes/won-utils-conversation
      #- ${WON_GIT_REPO:-./../../../..}/webofneeds/won-utils/won-utils-batch/target/classes:/usr/local/tomcat/won/override-classes/won-utils-batch
    depends_on:
      - owner_devsync
      - postgres
      - wonnode

  # bigdata rdf store for matcher service
  bigdata:
    restart: always
    build: ../../image/bigdata
    volumes:
      - ${base_folder:-.}/bigdata/data/:/usr/src/bigdata/data
    ports:
      - "9999:9999"

  # matcher service on connect with wonnode
  matcher_service:
    restart: always
    build: ../../image/matcher-service
    #image: webofneeds/matcher_service:live
    environment:
      - "NODE_HOST=matcherservice"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "URI_SPARQL_ENDPOINT=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "WONNODECONTROLLER_WONNODE_CRAWL=https://wonnode:8443/won/resource"
      - "CLUSTER_LOCAL_PORT=2561"
      - "JMX_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=*:62020,server=y,suspend=n
                  -Dcom.sun.management.jmxremote.port=61020 -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=61021
                  -Djava.rmi.server.hostname=wonnode" #wonnode is correct here!"
    networks:
      default:
        aliases:
          - matcherservice
    ports:
      - "2561:2561"
      - "62020:62020"
    depends_on:
      - bigdata
      - wonnode

  # solr server as an atom index
  solr:
    restart: always
    image: webofneeds/solr:live
    #volumes:
    #  - ${base_folder:-.}/solr/won/data:/opt/solr/server/solr/won/data
    #  - ${base_folder:-.}/solr/wontest/data:/opt/solr/server/solr/wontest/data
    ports:
      - "8984:8983"

  # solr matcher and connect to matcher service
  matcher_solr:
    restart: always
    build: ../../image/matcher-solr
    #image: webofneeds/matcher_solr:live
    environment:
      - "NODE_HOST=matchersolr"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "CLUSTER_LOCAL_PORT=2562"
      - "MATCHER_SOLR_URI_SOLR_SERVER=http://solr:8983/solr/"
      - "MATCHER_SOLR_URI_SOLR_SERVER_PUBLIC=http://solr:8983/solr/"
    networks:
      default:
        aliases:
          - matchersolr
    ports:
      - "2562:2562"
    depends_on:
      - solr
      - matcher_service

  # sparql matcher and connect to matcher service
  matcher_sparql:
    restart: always
    build: ../../image/matcher-sparql
    image: webofneeds/matcher_sparql:int
    environment:
      - "NODE_HOST=matchersparql"
      - "CLUSTER_SEEDNODES=matcherservice:2561"
      - "CLUSTER_LOCAL_PORT=2564"
      - "MATCHER_SPARQL_URI_SPARQL_ENDPOINT=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "MATCHER_SPARQL_URI_PUBLIC=http://matchersparql/sparql/"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    networks:
      default:
        aliases:
          - matchersparql
    ports:
      - "2564:2564"
    depends_on:
      - matcher_service
    volumes:
      - ${base_folder:-.}/won-client-certs/matcher_sparql:/usr/src/matcher-sparql/client-certs/

# postgres has trouble to just use normal volume mount (must be created by same user as
# the one executing postgres)
# this is the workaround from
# https://forums.docker.com/t/trying-to-get-postgres-to-work-on-persistent-windows-mount-two-issues/12456/5?u=friism
# (see also setenv.sh)
volumes:
  postgres-data:
    external: true
  mongodb-data:
    external: true
  wonnode-won-deps:
    external: true
  owner-won-deps:
    external: true
