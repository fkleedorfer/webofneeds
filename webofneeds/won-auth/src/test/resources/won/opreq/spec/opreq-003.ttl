@prefix auth:         <https://w3id.org/won/auth#> .
@prefix won:          <https://w3id.org/won/core#> .
@prefix wx-buddy:     <https://w3id.org/won/ext/buddy#> .
@prefix wx-hold:      <https://w3id.org/won/ext/hold#> .
@prefix wx-schema:    <https://w3id.org/won/ext/schema#> .
@prefix msg:          <https://w3id.org/won/message#> .
@prefix ex:           <https://example.com/test/> .
@prefix owl:          <http://www.w3.org/2002/07/owl#> .
@prefix xsd:          <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:         <http://www.w3.org/2000/01/rdf-schema#> .
@prefix party:        <http://example.org/test/party#> .
@prefix shrek:        <http://example.org/test/shrek#> .
@prefix donkey:       <http://example.org/test/donkey#> .
@prefix dragon:       <http://example.org/test/dragon#> .
@prefix magicmirror:  <http://example.org/test/magicmirror#> .
@prefix pinocchio:    <http://example.org/test/pinocchio#> .
@prefix lordfarquaad: <http://example.org/test/lordfarquaad#> .

# Shrek is organizing a rather secretive party. His friends can see an invitation without time/location details.
# Friends of friends can see that, too. Guests who are personally invited can see the time/location details.
# Friends who ask to come can see the details once the request has been accepted by Shrek.

# dragon cannot see the time/date info

dragon:expectedResult1
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation dragon:request1 .

dragon:request1
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:dragon ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:timeDateAndLocation ;
    auth:reqAtomState won:Active .

# dragon cannot see the invitiation info

dragon:expectedResult2
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation dragon:request2 .

dragon:request2
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:dragon ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:invitationWithoutSpecifics ;
    auth:reqAtomState won:Active .

# dragon gets a wx-buddy:BuddySocket token from donkey

dragon:expectedResult3
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation dragon:request3 ;
    auth:issueToken         [ auth:tokenScope   wx-buddy:BuddySocket ;
                              auth:tokenIss     ex:donkey ;
                              auth:tokenSub     ex:dragon ;
                              auth:expiresAfter 3600 ] .

dragon:request3
    a                 auth:OperationRequest ;
    auth:operation    [ auth:requestToken [ auth:tokenScope wx-buddy:BuddySocket ] ] ;
    auth:requestor    ex:dragon ;
    auth:reqAtom      ex:donkey ;
    auth:reqPosition  auth:positionRoot ;
    auth:reqAtomState won:Active .

# dragon gets a "buddyOfBuddy" token from shrek

dragon:expectedResult4
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation dragon:request4 ;
    auth:issueToken         [ auth:tokenScope   "buddyOfBuddy" ;
                              auth:tokenIss     ex:shrek ;
                              auth:tokenSub     ex:dragon ;
                              auth:expiresAfter 3600 ] .

dragon:request4
    a                auth:OperationRequest ;
    auth:operation   [ auth:requestToken [ auth:tokenScope "buddyOfBuddy" ] ] ;
    auth:requestor   ex:dragon ;
    auth:reqAtom     ex:shrek ;
    auth:reqPosition auth:positionRoot ;
    auth:bearsToken  dragon:donkeysBuddyToken4 .

dragon:donkeysBuddyToken4
    a               auth:AuthToken ;
    auth:tokenScope wx-buddy:BuddySocket ;
    auth:tokenIss   ex:donkey ;
    auth:tokenSub   ex:dragon ;
    auth:tokenIat   "2020-12-03T17:00:00"^^xsd:dateTime ;
    auth:tokenExp   "2020-12-03T18:00:00"^^xsd:dateTime .

# dragon can see the invitiation info with her token from shrek

dragon:expectedResult5
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation dragon:request5 .

dragon:request5
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:dragon ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:bearsToken   dragon:shreksBuddyOfBuddyToken ;
    auth:reqGraph     party:invitationWithoutSpecifics ;
    auth:reqAtomState won:Active ;
.

dragon:shreksBuddyOfBuddyToken
    a               auth:AuthToken ;
    auth:tokenScope "buddyOfBuddy" ;
    auth:tokenIss   ex:shrek ;
    auth:tokenSub   ex:dragon ;
    auth:tokenIat   "2020-12-03T17:00:00"^^xsd:dateTime ;
    auth:tokenExp   "2020-12-03T18:00:00"^^xsd:dateTime .

# dragon cannot time/date info with her token from shrek (she needs to request to attend and be granted)

dragon:expectedResult6
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation dragon:request6 .

dragon:request6
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:dragon ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:bearsToken   dragon:shreksBuddyOfBuddyToken ;
    auth:reqGraph     party:timeDateAndLocation ;
    auth:reqAtomState won:Active ;
.

# dragon can ask to attend the party with her token from shrek .

dragon:expectedResult7
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation dragon:request7 .

dragon:request7
    a                  auth:OperationRequest ;
    auth:operation     [ auth:messageTo msg:ConnectMessage ] ;
    auth:requestor     ex:dragon ;
    auth:reqAtom       ex:party ;
    auth:reqAtomState  won:Active ;
    auth:reqPosition   auth:positionSocket ;
    auth:bearsToken    dragon:shreksBuddyOfBuddyToken ;
    auth:reqSocket     party:attendeeSocket ;
    auth:reqSocketType wx-schema:AttendeeSocket .


# magicmirror can see the time/date/location info becauses he is invited

magicmirror:expectedResult1
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation magicmirror:request1 .

magicmirror:request1
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:magicmirror ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:timeDateAndLocation ;
    auth:reqAtomState won:Active .

# magicmirror can see who is attending or invited because he is invited

magicmirror:expectedResult2
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation magicmirror:request2 .

magicmirror:request2
    a                   auth:OperationRequest ;
    auth:operation      auth:opRead ;
    auth:requestor      ex:magicmirror ;
    auth:reqAtom        ex:party ;
    auth:reqAtomState   won:Active ;
    auth:reqPosition    auth:positionConnections ;
    auth:reqSocket      party:attendeeSocket ;
    auth:reqSocketType  wx-schema:AttendeeSocket ;
    auth:reqConnections party:attendeeSocketConnections .

# pinocchio can see the time/date/location info becauses he is invited

pinocchio:expectedResult1
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation pinocchio:request1 .

pinocchio:request1
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:pinocchio ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:timeDateAndLocation ;
    auth:reqAtomState won:Active .


# donkey can see the time/date/location info because he is shrek's buddy

donkey:expectedResult1
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessGranted ;
    auth:requestedOperation donkey:request1 .

donkey:request1
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:donkey ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:invitationWithoutSpecifics ;
    auth:reqAtomState won:Active ;
    auth:bearsToken   donkey:buddyTokenFromShrek .

donkey:buddyTokenFromShrek
    a               auth:AuthToken ;
    auth:tokenScope wx-buddy:BuddySocket ;
    auth:tokenIss   ex:shrek ;
    auth:tokenSub   ex:donkey ;
    auth:tokenIat   "2020-12-03T17:00:00"^^xsd:dateTime ;
    auth:tokenExp   "2020-12-03T18:00:00"^^xsd:dateTime .

# lordfarquaad cannot not see any content

lordfarquaad:expectedResult1
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation lordfarquaad:request1 .

lordfarquaad:request1
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:lordfarquaad ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:invitationWithoutSpecifics ;
    auth:reqAtomState won:Active .

lordfarquaad:expectedResult2
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation lordfarquaad:request2 .

lordfarquaad:request2
    a                 auth:OperationRequest ;
    auth:operation    auth:opRead ;
    auth:requestor    ex:lordfarquaad ;
    auth:reqAtom      ex:party ;
    auth:reqPosition  auth:positionAtomGraph ;
    auth:reqGraph     party:invitationWithoutSpecifics ;
    auth:reqAtomState won:Active .

# lordfarquaad cannot ask to attend the party.

lordfarquaad:expectedResult3
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation lordfarquaad:request3 .

lordfarquaad:request3
    a                  auth:OperationRequest ;
    auth:operation     [ auth:messageTo msg:ConnectMessage ] ;
    auth:requestor     ex:lordfarquaad ;
    auth:reqAtom       ex:party ;
    auth:reqAtomState  won:Active ;
    auth:reqPosition   auth:positionSocket ;
    auth:reqSocket     party:attendeeSocket ;
    auth:reqSocketType wx-schema:AttendeeSocket .

# lordfarquaad cannot see who is attending or invited

lordfarquaad:expectedResult4
    a                       auth:ExpectedAclEvalResult ;
    auth:decision           auth:accessDenied ;
    auth:requestedOperation lordfarquaad:request4 .

lordfarquaad:request4
    a                   auth:OperationRequest ;
    auth:operation      auth:opRead ;
    auth:requestor      ex:lordfarquaad ;
    auth:reqAtom        ex:party ;
    auth:reqAtomState   won:Active ;
    auth:reqPosition    auth:positionConnections ;
    auth:reqSocket      party:attendeeSocket ;
    auth:reqSocketType  wx-schema:AttendeeSocket ;
    auth:reqConnections party:attendeeSocketConnections .

### ACLs

# Grants a wx-buddy:BuddySocket token to buddies

ex:grantBuddyTokenAuth
    a            auth:Authorization ;
    auth:grantee [ auth:socket [ auth:socketType wx-buddy:BuddySocket ;
                                 auth:targetAtom [ ] ] ] ;
    auth:grant   [ auth:operation [ auth:requestToken [ auth:tokenScope   wx-buddy:BuddySocket ;
                                                        auth:expiresAfter 3600 ] ] ] .

# Grants a "buddyOfBuddy" token to buddies of shrek's buddies

shrek:grantBuddyOfBuddyTokenAuth
    a               auth:Authorization ;
    auth:bearer     [ auth:tokenScope wx-buddy:BuddySocket ;
                      auth:issuer     [ auth:socket [ auth:socketType  wx-buddy:BuddySocket ;
                                                      auth:connections [ auth:connectionState won:Connected ;
                                                                         auth:targetAtom      [ ] ] ] ] ] ;
    auth:grant      [ auth:operation [ auth:requestToken [ auth:tokenScope   "buddyOfBuddy" ;
                      auth:expiresAfter 3600 ] ] ].

# Allows direct buddies and bearers of a "buddyOfBuddy" token signed by the holder of the
# party (Shrek's persona atom) to see the graph #invitationWithoutSpecifics
# and to connect/communicate via the wx-schema:AttendeeSocket - which allows
# Shrek (as the owner of the party atom), to accept/deny their requests to attend

party:unspecificInvitationAuth
    a           auth:Authorization ;
    auth:bearer [ auth:tokenScope "buddyOfBuddy", wx-buddy:BuddySocket ;
                  auth:issuer     [ auth:socket [ auth:socketType wx-hold:HoldableSocket ;
                                                  auth:targetAtom [ ] ] ] ] ;
    auth:grant  [ auth:graph  [ auth:graphType auth:sysinfoGraph ;
                                auth:graphIri  party:invitationWithoutSpecifics ;
                                auth:operation auth:opRead ] ;
                  auth:socket [ auth:socketType wx-schema:AttendeeSocket ;
                                auth:operation  auth:opConnectClose, auth:opCommunicate ] ] .

# All atoms connected on the wx-schema:AttendeeSocket get read access to
# the content graph #timeDateAndLocation, containing all information needed to
# attend. Shrek can invite people directly by requesting a connection with them
# on the attendee socket.

party:attendeeAuth
    a            auth:Authorization ;
    auth:grantee [ auth:socket [ auth:socketType wx-schema:AttendeeSocket ;
                                 auth:connection [ auth:targetAtom      [ ] ;
                                                   auth:connectionState won:Connected, won:RequestSent ] ] ] ;
    auth:grant   [ auth:graph  [ auth:graphType auth:sysinfoGraph ;
                                 auth:graphIri  party:invitationWithoutSpecifics, party:timeDateAndLocation ;
                                 auth:operation auth:opRead ] ;
                   auth:socket [ auth:socketType wx-schema:AttendeeSocket ;
                                 auth:operation  auth:opConnectClose, auth:opCommunicate, auth:opRead ] ] .


## Any atom is allowed to get the authentication info
## for read on graphs and sending messages ot the attendee socket
#
#party:authInfoAuth
#    auth:grantee auth:anyone ;
#    auth:grant   [ auth:graph  [ auth:#AuthInfo [ auth:operation auth:Read ] ] ;
#                   auth:socket [ auth:socketType      wx-schema:AttendeeSocket ;
#                                 auth:provideAuthInfo [ auth:operation [ auth:messageTo auth:anyMessageType ] ] ] ] .
#
## Anyony can learn how to obtain a wx-buddy:BuddySocket token
#
#ex:buddySocketTokenInfoAuth
#    auth:grantee auth:anyone ;
#    auth:grant
#                 [ auth:provideAuthInfo
#                         [ auth:operation [ auth:requestToken [ auth:tokenScope wx-buddy:BuddySocket ] ] ] ] .
#
#

## shrek's buddy network (and connection to the party)

ex:shrek
    a          won:Atom, won:Persona ;
    won:socket shrek:buddySocket, shrek:holderSocket ;
    won:state  won:Active .

shrek:buddySocket
    a                    won:Socket ;
    won:socketDefinition wx-buddy:BuddySocket ;
    won:connections      shrek:buddyConnections .

shrek:holderSocket
    a                    won:socket ;
    won:socketDefinition wx-hold:HolderSocket ;
    won:connections      shrek:held1 .

shrek:held1
    a                   won:Connection ;
    won:targetAtom      ex:party ;
    won:connectionState won:Connected .

shrek:buddyConnections
    rdfs:member shrek:buddy1, shrek:buddy2, shrek:buddy3 .

shrek:buddy1
    a                   won:Connection ;
    won:targetAtom      ex:donkey ;
    won:connectionState won:Connected .

shrek:buddy2
    a                   won:Connection ;
    won:targetAtom      ex:fiona ;
    won:connectionState won:Connected .

shrek:buddy3
    a                   won:Connection ;
    won:targetAtom      ex:lordfarquaad ;
    won:connectionState won:RequestReceived .


## donkey's buddy network

ex:donkey
    a          won:Atom, won:Persona ;
    won:socket donkey:buddySocket ;
    won:state  won:Active .

donkey:buddySocket
    a                    won:Socket ;
    won:socketDefinition wx-buddy:BuddySocket ;
    won:connections      donkey:buddyConnections .

donkey:buddyConnections
    rdfs:member donkey:buddy1, donkey:buddy2, donkey:buddy3 .

donkey:buddy1
    a                   won:Connection ;
    won:targetAtom      ex:shrek ;
    won:connectionState won:Connected .

donkey:buddy2
    a                   won:Connection ;
    won:targetAtom      ex:dragon ;
    won:connectionState won:Connected .

donkey:buddy3
    a                   won:Connection ;
    won:targetAtom      ex:lordfarquaad ;
    won:connectionState won:RequestReceived .

## The party

ex:party
    a                won:Atom, ex:SecretParty ;
    won:socket       party:attendeeSocket, party:holdableSocket ;
    won:contentGraph party:invitationWithoutSpecifics, party:timeDateAndLocation .

party:holdableSocket
    a                    won:Socket ;
    won:socketDefinition wx-hold:HoldableSocket ;
    won:connections      party:holdableSocketConnections .

party:holdableSocketConnections
    rdfs:member party:heldBy .

party:heldBy
    a                   won:Connection ;
    won:targetAtom      ex:shrek ;
    won:connectionState won:Connected .

party:attendeeSocket
    a                    won:Socket ;
    won:socketDefinition wx-schema:AttendeeSocket ;
    won:connections      party:attendeeSocketConnections .

party:attendeeSocketConnections
    rdfs:member party:guest1, party:guest2, party:guest3 .

party:guest1
    a                   won:Connection ;
    won:targetAtom      ex:shrek ;
    won:connectionState won:Connected .

party:guest2
    a                   won:Connection ;
    won:targetAtom      ex:magicmirror ;
    won:connectionState won:RequestSent .

party:guest3
    a                   won:Connection ;
    won:targetAtom      ex:pinocchio ;
    won:connectionState won:Connected .