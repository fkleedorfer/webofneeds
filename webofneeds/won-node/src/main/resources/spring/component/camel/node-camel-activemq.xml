<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd                http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- 
		Start ActiveMQComponent 
		
		For communicating from camel (running in the node) with
		activeMQ, also running in the node. This component will inevitably be created
		and if we don't do it explicitly, all of the beans below will be magically autowired, 
		making configuration hard. Thus, we do it explicitly here.
		
		Fun fact: the component's name MUST BE 'activemq'! Otherwise another one will be created!
		 (reason: it will be responsible for endpoints named 'activemq:...')
	- ->

	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    	<property name="configuration" ref="jmsConfig"/>
  	</bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledConnectionFactory" />
    </bean>
	
	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
    	<property name="connectionFactory" ref="pooledConnectionFactory"/>
    	<property name="transacted" value="false"/>
    	<property name="concurrentConsumers" value="10"/>
  	</bean>
	
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
        init-method="start" destroy-method="stop">
        <property name="maxConnections" value="10" />
        <property name="connectionFactory" ref="jmsConnectionFactory" />
    </bean>

	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="embeddedBroker">
        <property name="brokerURL" value="vm://wonBroker?marshal=false&amp;broker.persistent=false" />
    </bean-->
 
	<!--  
		End ActiveMQComponent
		(not working, needs further investigation - seems that the camel context is created before this, and therefore, 
		the activemq component is autogenerated. Trying to change the order by having it depend on the embeddedBroker
		did not work - the embeddedBroker wasn't generated by its factory. Not sure why.)
	 -->

	<!-- This is used for the connections from internal clients to embedded 
		(internal) node broker. Since in this case establishing ssl connection is 
		overkill, vm connection is used instead -->
	<!-- bean id="activemqConnectionFactory"
		class="org.apache.activemq.ActiveMQConnectionFactory">
		<!- - this can be parsed but it does not have the desired effect: <property name="brokerURL" value="vm://wonBroker?marshal=false&amp;broker.persistent=false&amp;broker.wireFormat.maxInactivityDuration=30000&amp;broker.wireFormat.maxInactivityDurationInitalDelay=10000&amp;broker.transport.useKeepAlive=true&amp;broker.usePooledConnection=true" /> - ->
		<property name="brokerURL" value="vm://wonBroker?marshal=false&amp;broker.persistent=false" />
		<property name="maxThreadPoolSize" value="10" />
	</bean-->

    <!-- this is about as good as it gets, currently: -->
	<bean id="cachedConnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory"
		depends-on="embeddedBroker">
		<property name="targetConnectionFactory"
			ref="activemqConnectionFactory"></property>
		<property name="sessionCacheSize" value="10"></property>
	</bean>
	<!-- This is used for the connections from internal clients to embedded 
		(internal) node broker. Since in this case establishing ssl connection is 
		overkill, vm connection is used instead -->
	<bean id="activemqConnectionFactory"
		class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="vm://wonBroker?marshal=false&amp;broker.persistent=false" />
		<property name="maxThreadPoolSize" value="10" />
	</bean>
	
	<!-- Configuring Broker -->
	<!-- we used to have the o.a.a.x.PooledBrokerFactoryBean here, but it does 
		not set the main spring context as its parent context in its onPropertiesSet() 
		method, so we can't use any of our beans inside the broker's spring context 
		- but we need to use the same trustStoreService bean inside and outside the 
		broker, so we changed to use the o.a.a.x.BrokerFactoryBean instead -->
	<bean id="embeddedBroker"
		class="org.apache.activemq.xbean.BrokerFactoryBean">
		<property name="config"
			value="classpath:spring/component/broker/activemq.xml" />
		<property name="start" value="true" />
	</bean>
	<bean id="activeMQService"
		class="won.protocol.jms.ActiveMQServiceImpl">
		<constructor-arg name="type" value="AtomProtocol" />
	</bean>
	<bean id="brokerComponentFactory"
		class="won.protocol.jms.BrokerComponentFactory" />
	<bean name="atomProtocolCamelConfigurator"
		class="won.node.camel.AtomProtocolCamelConfiguratorImpl">
		<property name="componentName" value="activemq" />
		<property name="messagingContext" ref="messagingContext" />
	</bean>
</beans>