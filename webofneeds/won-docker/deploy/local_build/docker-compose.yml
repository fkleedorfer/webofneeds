version: "3"
services:
  # create self-signed server certificate for $deploy_host
  gencert:
    build: ../../image/gencert
    #image: webofneeds/gencert:live
    environment:
      - "CN=wonnode"
      - "PASS=pass:changeit"
    volumes:
      - $base_folder/won-server-certs:/usr/local/certs/out/

  # portsgres atom databases for owner and wonnode
  postgres:
    restart: always
    build: ../../image/postgres
    #image: webofneeds/postgres:live
    environment:
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      #- $base_folder/postgres/data/pgdata:/var/lib/postgresql/data/pgdata
      # use a named volume here to work around a postgres/docker incompatibility under windows
      # (see end of file)
      - postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"

  # wonnode server => access https://$deploy_host:8889/won
  wonnode:
    restart: always
    build:
      context: ../../image/wonnode
      args:
        DEV_MODE: "true"
    #image: webofneeds/wonnode:live
    environment:
      - "uri.host=wonnode"
      - "http.port=8443"
      - "db.sql.jdbcDriverClass=org.postgresql.Driver"
      - "db.sql.jdbcUrl=jdbc:postgresql://postgres:5432/won_node"
      - "db.sql.user=won"
      - "db.sql.password=won"
      - "db.ddl.strategy=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "activemq.broker.port=61617"
      - "LOGBACK_CONFIG=../logback-config/logback.xml"
      - "JMX_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=62001,server=y,suspend=n"
    ports:
      - "8889:8443"
      - "61617:61617"
      - "62001:62001"
    volumes:
      - $base_folder/won-server-certs:/usr/local/tomcat/conf/ssl/
      - $base_folder/won-client-certs/wonnode:/usr/local/tomcat/won/client-certs/
      - $base_folder/logback-config:/usr/local/tomcat/won/logback-config/
      - $base_folder/../../../won-auth/target/classes:/usr/local/tomcat/won/override-classes/won-auth
      - $base_folder/../../../won-utils/won-utils-shacl2java/target/classes:/usr/local/tomcat/won/override-classes/won-utils-shacl2java
      - $base_folder/../../../won-core/target/classes:/usr/local/tomcat/won/override-classes/won-core
      - $base_folder/../../../won-vocab/target/classes:/usr/local/tomcat/won/override-classes/won-vocab
      - $base_folder/../../../won-cryptography/target/classes:/usr/local/tomcat/won/override-classes/won-cryptography
      - $base_folder/../../../won-node/target/classes:/usr/local/tomcat/won/override-classes/won-node
    depends_on:
      - postgres

  # mongodb for persistent debug bot
  mongodb:
    restart: always
    image: tutum/mongodb:3.2
    environment:
      - "MONGODB_USER=won"
      - "MONGODB_DATABASE=won"
      - "MONGODB_PASS=won"
    ports:
      - "27017:27017"
      - "28017:28017"
    volumes:
      - $base_folder/mongodb/data/db:/data/db

# debug bot used to test atom communication
#  debug_bot:
#    restart: always
#    build: ../../image/bots
#    #image: webofneeds/bots:live
#    environment:
#      - "node.default.host=wonnode"
#      - "node.default.http.port=8443"
#      - "won.node.uris=https://wonnode:8443/won/resource"
#      - "botContext.impl=mongoBotContext"
#      - "botContext.mongodb.user=won"
#      - "botContext.mongodb.pass=won"
#      - "botContext.mongodb.host=mongodb"
#      - "botContext.mongodb.port=27017"
#      - "botContext.mongodb.database=won"
#    depends_on:
#      - wonnode
#      - mongodb

  # owner application (frontend) => access https://$deploy_host:8082/owner
  owner:
    restart: always
    build: ../../image/owner
    #image: webofneeds/owner:live
    environment:
      - "node.default.host=wonnode"
      - "uri.host=owner"
      - "http.port=8443"
      - "node.default.http.port=8443"
      - "db.sql.jdbcDriverClass=org.postgresql.Driver"
      - "db.sql.jdbcUrl=jdbc:postgresql://postgres:5432/won_owner"
      - "db.sql.user=won"
      - "db.sql.password=won"
      - "db.ddl.strategy=validate"
      - "CERTIFICATE_PASSWORD=changeit"
      - "JMX_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=62000,server=y,suspend=n"
      #- "logback.configurationFile=/usr/local/tomcat/won/logback-config/logback.xml"
      - "LOGBACK_CONFIG=../logback-config/logback.xml"
    ports:
      - "8082:8443"
      - "62000:62000"
    volumes:
      - $base_folder/won-server-certs:/usr/local/tomcat/conf/ssl/
      - $base_folder/won-client-certs/owner:/usr/local/tomcat/won/client-certs/
      - $base_folder/logback-config:/usr/local/tomcat/won/logback-config/
      - $base_folder/../../../won-owner-webapp/target/classes:/usr/local/tomcat/won/override-classes/won-owner-webapp/
      - $base_folder/../../../won-owner/target/classes:/usr/local/tomcat/won/override-classes/won-owner/
      - $base_folder/../../../won-core/target/classes:/usr/local/tomcat/won/override-classes/won-core/
      - $base_folder/../../../won-vocab/target/classes:/usr/local/tomcat/won/override-classes/won-vocab/
      - $base_folder/../../../won-cryptography/target/classes:/usr/local/tomcat/won/override-classes/won-cryptography/
      - $base_folder/../../../won-matcher/target/classes:/usr/local/tomcat/won/override-classes/won-matcher/
      - $base_folder/../../../won-utils/won-utils-mail/target/classes:/usr/local/tomcat/won/override-classes/won-utils-mail
      - $base_folder/../../../won-utils/won-utils-goals/target/classes:/usr/local/tomcat/won/override-classes/won-utils-goals
      - $base_folder/../../../won-utils/won-utils-conversation/target/classes:/usr/local/tomcat/won/override-classes/won-utils-conversation
      - $base_folder/../../../won-utils/won-utils-batch/target/classes:/usr/local/tomcat/won/override-classes/won-utils-batch
    depends_on:
      - wonnode
      - postgres

  # bigdata rdf store for matcher service
  bigdata:
    restart: always
    build: ../../image/bigdata
    volumes:
      - $base_folder/bigdata/data/:/usr/src/bigdata/data
    ports:
      - "10000:9999"

  # matcher service on connect with wonnode
  matcher_service:
    restart: always
    build: ../../image/matcher-service
    #image: webofneeds/matcher_service:live
    environment:
      - "node.host=matcherservice"
      - "cluster.seedNodes=matcherservice:2561"
      - "uri.sparql.endpoint=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "wonNodeController.wonNode.crawl=https://wonnode:8443/won/resource"
      - "cluster.local.port=2561"
    networks:
      default:
        aliases:
          - matcherservice
    ports:
      - "2561:2561"
    depends_on:
      - bigdata
      - wonnode

  # solr server as an atom index
  solr:
    restart: always
    image: webofneeds/solr:live
    #volumes:
    #  - $base_folder/solr/won/data:/opt/solr/server/solr/won/data
    #  - $base_folder/solr/wontest/data:/opt/solr/server/solr/wontest/data
    ports:
      - "8984:8983"

  # solr matcher and connect to matcher service
  matcher_solr:
    restart: always
    build: ../../image/matcher-solr
    #image: webofneeds/matcher_solr:live
    environment:
      - "node.host=matchersolr"
      - "cluster.seedNodes=matcherservice:2561"
      - "cluster.local.port=2562"
      - "matcher.solr.uri.solr.server=http://solr:8983/solr/"
      - "matcher.solr.uri.solr.server.public=http://solr:8983/solr/"
    networks:
      default:
        aliases:
          - matchersolr
    ports:
      - "2562:2562"
    depends_on:
      - solr
      - matcher_service

  # sparql matcher and connect to matcher service
  matcher_sparql:
    restart: always
    build: ../../image/matcher-sparql
    image: webofneeds/matcher_sparql:int
    environment:
      - "node.host=matchersparql"
      - "cluster.seedNodes=matcherservice:2561"
      - "cluster.local.port=2564"
      - "matcher.sparql.uri.sparql.endpoint=http://bigdata:9999/blazegraph/namespace/kb/sparql"
      - "matcher.sparql.uri.public=http://matchersparql/sparql/"
      - "JMEM_OPTS=-XX:+HeapDumpOnOutOfMemoryError"
    networks:
      default:
        aliases:
          - matchersparql
    ports:
      - "2564:2564"
    depends_on:
      - matcher_service
    volumes:
      - $base_folder/won-client-certs/matcher_sparql:/usr/src/matcher-sparql/client-certs/

# postgres has trouble to just use normal volume mount (must be created by same user as
# the one executing postgres)
# this is the workaround from
# https://forums.docker.com/t/trying-to-get-postgres-to-work-on-persistent-windows-mount-two-issues/12456/5?u=friism
# (see also setenv.sh)
volumes:
  postgres-data:
    external: true